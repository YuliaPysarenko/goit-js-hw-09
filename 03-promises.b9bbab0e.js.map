{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SACpCF,EAAKG,iBAAiB,UAMtB,SAAsBC,GACpBA,EAAIC,iBAEJ,MAMOC,EAAWN,EAAKO,SAASC,KAAKC,MACrC,IAAK,IAAIC,EAAI,EAAGA,IAAMN,EAAIO,OAAOC,KAAMF,GAAKJ,EAE1CO,EAAWb,EAAKO,SAASO,OAAOL,MAChCM,EAAQf,EAAKO,SAASS,MAAMP,MAE5BQ,QAAQC,IAAIL,EAAUE,E,IAlB1B,IAAIF,EAAW,EACXE,EAAQ,EA0CZ,IAAuBI,EAAUC,GAAVD,EAuBRN,EAvBkBO,EAuBRL,EAtBhB,IAAIM,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEvCC,YAAW,KACJH,EACFF,EAAQ,CAAEM,SAAAT,EAAUH,MAAAI,IAGpBG,EAAO,CAAEK,SAAAT,EAAUH,MAAAI,GAAQ,GAG7BA,EAAM,KAYTS,MAGH,UAA4BD,SAAAE,EAAUd,MAAAe,IACpCd,QAAQC,IAAI,uBAAqBY,QAAiBC,M,IAHjDC,OAMH,UAA2BJ,SAAAK,EAAUjB,MAAAkB,IACnCjB,QAAQC,IAAI,sBAAoBe,QAAeC,M","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector(`.form`);\nform.addEventListener(`sabmit`, onSabmitForm);\n\n\nlet position = 0;\nlet delay = 0;\n\nfunction onSabmitForm(evt) {\n  evt.preventDefault();\n\n  const data = {\n  position: ``,\n  delay: ``,\n  }\n  \n  // Варіант 1\n   const stepForm = form.elements.step.value;\n  for (let i = 0; i === evt.target.form; i += stepForm) {\n\n    position = form.elements.amount.value;\n    delay = form.elements.delay.value;\n  \n    console.log(position, delay);\n  }\n \n  // Варіант2\n  \n  // const stepForm = form.elements.step.value;\n  //  position = form.elements.amount.value = data.position;\n  //  delay = form.elements.delay.value = data.delay;\n\n  // for (let i = 0; i === position && i === delay; i += stepForm) {\n  //        createPromise(position, delay);\n  //     }\n\n  \n  //  for (let i = 0; i === form.elements.delay.value && i === form.elements.step.value && i === form.elements.amount.value; i += step) {\n  //   createPromise(position, delay);\n  //     }\n\n  // for (let i = 0; i === evt.target.delay && i === evt.target.step && i === evt.target.amount; i += step) {\n  //   // createPromise(position, delay);\n  //  createPromise({position: data.position, delay: data.delay});\n  //     }\n\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n   setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay })\n        // Reject\n      }\n   }, delay);\n//   if (position <= amount) {\n//     clearInterval(idSetInterval)\n//     return;\n//     }\n//     position += 1;\n  });\n}\n\n// const idSetInterval = setInterval(createPromise, 10);\n\ncreatePromise( position, delay )\n  .then(fulfilledPromise)\n  .catch(rejectedPromise);\n\nfunction fulfilledPromise( {position, delay }) {\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction rejectedPromise({ position, delay }) {\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\n\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","addEventListener","evt","preventDefault","stepForm","elements","step","value","i","target","form","$47d4ff9957288465$var$position","amount","$47d4ff9957288465$var$delay","delay","console","log","position1","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","then","position2","delay2","catch","position3","delay3"],"version":3,"file":"03-promises.b9bbab0e.js.map"}